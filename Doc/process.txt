最后更新时间：2018年6月15日16:58:27
修改人：harmful


外设IO:
	ADC:
		PA1 ADC1 
		PA2 ADC2
		PA3 ADC3
	IO:
		PA9  POUT1
		PA10 POUT2
		PA11 POUT3
		PA12 POUT4
		PB2  DOUT1
		PB3  DOUT2
		PB4  DOUT3
		PB5  DOUT4
	RS485:
		PB9  EN
		PB10 TXD3
		PB11 RXD3
	12864G:
		PA6 LCD_IIC_SCL 
		PA7 BUSY
		PA8 LCD_IIC_SDA

=============================================================================
新版程序：
程序说明：
	项目检测成功显示[OK],出错显示[Fail]
	只有串口不成功会自动暂停程序
	检测完成后
		站好 为 44444440
		P1~4 为 00000004 
		时间 为 1805150900
	检测项目 
		7.2V 电源输出
		3.3V 电源输出
		5V   电源输出
		串口通讯 9600-8-0-1
		PAD 输入检测
		时间设置
		掉电数据保存
		睡眠模式功耗

界面：
		R0 ...                           R20                 
		+----------------------------------+
	L0	| [历史信息行]                     |
	L1	| [由下往上刷新]                   |
	L2	|                                  |
	L3	|                                  |
	L4	|                                  |
	L5	|                                  |
	L6	|                                  |
	L7	|                                  |
		| [进度显示行]                     |
		+----------------------------------+
	L0`L6 显示命令传输情况
	L3 显示进度
		
流程：
	/* 初始化设备 */
	系统延时
	中断管理
	脉冲输出
	ADC检测
	RS485串口通讯
	系统时钟初始化
	屏幕显示初始化
	
	/* 检测流程 */
	page1
10%		ADC检测7.2V
15%		ADC检测3.3V
20%		等待5s
	
	
	
	page2
		检测RS485通讯是否成功 ： 发送 666666#A:44444440#
		判断接受是否含有 ： A:44444440
		是 显示 " * RS485 Com     [OK]"
32%		否 显示 " * RS485 Com   [Fail]"
		
		初始化 P 和 C : 发送 666666#Q:7777000000000000P1:00000000P2:00000000P3:00000000P4:00000000C:1805150900#
		判断接受是否含有 Q:7777000000000000;P1:00000000;P2:00000000;P3:00000000;P4:00000000
		设输出4个脉冲
		是 显示 " * Init  PADC    [OK]"
40%		否 显示 " * Init  PADC  [Fail]"
		
		检测5V和端口值：发送 "222222#Z#"
		获取ADC检测5v的电压值
		接收串口返回
		从串口返回中识别时候含有P A D正确信息的字样
		若某一项不正确，数组 A P D 中添加 不正确的信息
		是 显示 " * Check P A D   [OK]"
62%		否 显示 " * Check P A D [Fail]"
		比较5V的电压是否正确
		是 显示 " * Power   5V    [OK]"
70%		否 显示 " * Power   5V  [Fail]"

		第一次检测时间：发送 666666#C?#
		判断接受数据是否含有 C:
		是 显示 " * Read Clock    [OK]" 数据保存至Time1
80%		否 显示 " * Read Clock  [Fail]"
		进入下一项



	page3
		设备重启
88%		显示 " * Reboot        [OK]"

		第二次检测时间：发送 666666#C?
		判断接受数据是否含有 C:
		是 显示 " * Read Clock    [OK]" 数据保存至Time2
92%		否 显示 " * Read Clock  [Fail]"

		设置睡眠：发送 666666#G:1#
		判断接受数据是否含有 ST:44444440;G:1
		是 显示 " * Device Sleep  [OK]" 
100%	否 显示 " * Device Sleep[Fail]"
		进入下一项



	page4
		判断是否发送电源检测错误
100%	是 显示对应的电压值
		
		判断Time1 Time2 是否完全相同
100%	否 显示 Time1 Time2
		
		分别判断 A P D第一个字符是否为 '\0'
		否 分别显示数组 APD 	
		输出错误代码
100%	显示  "... .. Finish .. ..."
		蜂鸣器响2声表示完成
	
===================================================================================
原版程序：
	界面：
		+------------------------------+
		|                              |
		|                              |
		|                              |
		|                              |
		|                              |
		|          7.2v 3.3v           |
		| 50%                          |
		| >>>                  TESTING |
		+------------------------------+
	测试内容：
		P1~P4 A1~A4 D1~D4
		时间掉电保存
		7.2V供电 3.3V供电 5V输出
		
	测试流程：
		初始化驱动：delay nvic io dac usart iic 
		延时1秒
		设置屏幕亮度
		清屏
		界面显示：10% >>> TESTINH
		获取通道1电压值给adcx1(7.2v)
		获取通道3电压值给adcx3(3.3v)
		比较adcx1是否在规定范围内，若错误，界面显示7.2V 
		比较adcx3是否在规定范围内，若错误，界面显示3.3V
		若ERROR=1,界面显示OVER,程序死循环。
		延时3秒
		清屏
		界面显示：20% >>> TESTINH
		发送 tx_rs485buf1 ("666666#Q:7777000000000000P1:0P2:0P3:0P4:0#")
		while(1)
		{
			等待接受串口数据完成
			Over = 0 执行：
				清屏
				界面显示：30% >>> TESTINH
				比较接收到的串口数据是否含有 "Q:7777000000000000P1:0P2:0P3:0P4:0#"
				若没有： 
					界面显示：485 OVER ,">>>>>>>>>>>>>>>>"
					蜂鸣器响
					Over = 4;
				清空串口接收缓存
				PI1~4 产生4个脉冲
				串口发送 "222222#Z#"
				清屏
				界面显示：40% >>> TESTINH
				延时100ms
				获取通道2电压值给adcx2(5V输出)
				比较adcx3是否在规定范围内，若错误，界面显示5V
				Over = 1
			Over = 1 执行：
				清屏
				界面显示：50% >>> TESTINH
				比较串口接收数据是否含有 "A1:0.37" "A1:0.37" "A1:0.14" "A1:0.14"
				若没有：
					缓存 P 保存 P1~4
				比较串口接收数据是否含有 "P1:00000004" "P2:00000004" "P3:00000004" "P4:00000004"
				若没有：
					缓存 P 保存 P1~4
				比较串口接收数据是否含有 "K1:0" "K2:0" ""K3:0" "K4:0"
				若没有：
					缓存 D 保存 D1~4
				清空串口接收缓存
				串口发送 "666666#C?#"
				Over=2;
			Over = 2 执行：
				清屏
				界面显示：60% >>> TESTINH
				比较串口接收数据是否含有 "C"
				若有：
					保存rx_rs485buf 到Time1
				测试机电源断开
				延时2秒
				测试机电源闭合
				清屏
				界面显示：70% >>> TESTINH
				延时5秒
				清屏
				界面显示：80% >>> TESTINH
				清空串口接收缓存
				串口发送 "666666#C?#"
				Over=3;
			Over = 3 执行
				比较串口接收数据是否含有 "C:"
				若有：
					保存 rx_rs485buf 到Timer2
					比较Timer1 Timer2 是否相同
					若不相同：
						界面显示 TIME
					串口发送 "666666#G:1#"
					蜂鸣器响
					清屏
					界面显示：100% ">>>>>>>>>>>>>>>>" 缓存A P D 内容 OVER
					Over = 4		
		}
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	